const gocardless = require('gocardless-nodejs');
const constants = require('gocardless-nodejs/constants');
const express = require('express');
const router = new express.Router();
const urlDashBoard = "http://192.168.1.20:3000";
const ClientData = require('../model/Client_Data');
const Client = require("../model/Client");
const Service = require('../model/services');
const sequelize = require('../config/database');
const Sequelize = require('sequelize');
const sessionToken = 'testToken' //your application generated token 
const GoCardlessAccessToken = 'sandbox_YtKPdger6pcabB-d_5OdzIMzkZJ7Lko9e0F-jKA5' //generated by gocardless for you application using your account.
const client = gocardless(
    // We recommend storing your access token in an environment
    // variable for security like given below
    //process.env.GoCardlessAccessToken,
    //but for now we are storing in a variable for testing
    GoCardlessAccessToken,
    // Change this to constants.Environments.Live when you're ready to go live
    constants.Environments.Sandbox
);
var clientId = 0;
var task_ID = 0;

router.get('/gocardlessCreateUser', async(req, res) => {
    try {
        const userID = req.session.C_Id;

        SELECTQuery = "SELECT * FROM `v_client_data` where C_id='" + userID + "'";
        sequelize.query(SELECTQuery, { type: sequelize.QueryTypes.SELECT })
            .then(function(result) {
                clientId = result[0].C_id;
                client.redirectFlows.create({
                    description: "Cider Barrels",
                    session_token: sessionToken,
                    success_redirect_url: urlDashBoard + "/successPage",
                    prefilled_customer: {
                        given_name: result[0].FirstName,
                        family_name: result[0].LastName,
                        email: result[0].email,
                        address_line1: result[0].address,
                        city: result[0].Country,
                        postal_code: ""
                    }
                }).then(function(redirectFlow) {

                    console.log(redirectFlow.id);
                    console.log(redirectFlow.redirect_url);
                    res.send({ msg: redirectFlow.redirect_url });
                    // res.redirect(redirectFlow.redirect_url);
                }).catch(function(error) {
                    console.error('errorUsercreate: ', error);

                });



            });

    } catch (e) {
        console.log(e)
    }
})


router.get('/successPage', (req, res) => {
    var url = req.query.redirect_flow_id;
    res.redirect("/gocardlessCompleteMandate/" + url)
        //res.send('CardlessSuccess');
})


router.get('/gocardlessCompleteMandate/:id', async(req, res) => {
    const redirectFlowID = req.params.id;

    console.log("userID: " + clientId)
    try {

        const redirectFlow = await client.redirectFlows.complete(
            redirectFlowID, //this is redirectFlow.id and in query parameter also we get in redirectFlow in above route.
            {
                session_token: sessionToken
            }
        );

        // Store the mandate and customer against the customer's database record so you can charge
        // them in future
        console.log(`Mandate: ${redirectFlow.links.mandate}`); //save in db with Customer id
        console.log(`Customer: ${redirectFlow.links.customer}`);
        console.log(`Confirmation URL: ${redirectFlow.confirmation_url}`);

        // Display a confirmation page to the customer, telling them their Direct Debit has been
        // set up. You could build your own, or use ours, which shows all the relevant
        // information and is translated into all the languages we support.
        console.log("userID: " + clientId)
        var c_id = clientId;
        ClientData.update({ gocardlessCustomerID: redirectFlow.links.customer, gocardlessMandateID: redirectFlow.links.mandate }, {
            where: {
                C_id: c_id
            }
        }).then((result) => {
            res.redirect(redirectFlow.confirmation_url);
            // res.status(200).send({ msg: redirectFlow.confirmation_url });
        });

        // res.redirect(redirectFlow.confirmation_url);
    } catch (e) {
        console.log(e.message)
    }
})

//(iv) taking payment from customer
router.get('/gocardlessPayment/:id', async(req, res) => {
    const task_id = req.params.id;
    var am;
    var mandateID;
    try {

        Service.findOne({ where: { task_id: task_id } }).then(function(result) {
            task_ID = result.task_id;
            am = parseInt(result.Cost);

            console.log(" in task_ID " + task_ID);
            console.log(" in am " + am);
            const userID = req.session.C_Id;
            ClientData.findOne({ where: { C_id: userID } }).then(function(result) {
                mandateID = result.gocardlessMandateID;

                console.log(" in mandateID " + mandateID);
                const random_payment_specific_string = generateRandomStr(5)
                client.payments.create({
                        amount: am,
                        currency: "EUR", // UK currency
                        "retry_if_possible": true,
                        links: {
                            mandate: mandateID // get from database  
                        },
                        metadata: {
                            invoice_number: "10" // generate according to your invoices in your database
                        }
                    },
                    random_payment_specific_string // a string should be unique for every payment
                ).then(function(payment) {
                    console.log(payment.id);

                    Service.update({ paymentID: payment.id }, {
                        where: {
                            task_id: task_id
                        }
                    }).then((result) => {
                        //res.redirect('/gocardlessPaymentDetails/' + payment.id);
                        res.status(200).send({ msg: "/gocardlessPaymentDetails/" + payment.id });
                    });
                }).catch(function(error) {
                    console.error('Paymentcreate: ', error);
                    //res.status(400).send("errorPaymentcreate " + error);
                });

                // Keep hold of this payment ID - we'll use it in a minute
                // It should look like "PM000260X9VKF4"



            });




        });

        console.log(" after mandateID " + mandateID);
        console.log("after task_ID " + task_ID);
        console.log("after am " + am);
        //"console.log(Mandate: ${redirectFlow.links.mandate})"


        //user.gocardlessPayments.push(obj)
        //await user.save()

    } catch (e) {
        console.log("payment error ", e)
    }
})

//to generate a random string

function generateRandomStr(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}





router.get('/gocardlessPaymentDetails/:id', async(req, res) => {
    const paymentId = req.params.id
    try {
        const paymentDetails = await client.payments.find(paymentId);

        console.log(`Amount: ${paymentDetails.amount}`);
        console.log(`Status: ${paymentDetails.status}`);



        console.log(`paymentDetails: ${paymentDetails}`);
        res.redirect("/client/paymentSuccPage")
            //res.status(200).send({ msg: '/client/paymentSuccPage' })



    } catch (e) {
        console.log(e)
    }
})


router.get('/listAllUsers', async(req, res) => {
    try {
        const listResponse = await client.customers.list();
        const customers = listResponse.customers;
        res.send({
            allCustomers: customers
        })
    } catch (e) {
        console.log(e)
    }
})



router.get('/listSingleUser', async(req, res) => {
    try {
        const id = 'CU000EHHY2DPYJ'
        const singleCustomer = await client.customers.find(id);
        res.send({
            singleCustomer: singleCustomer
        })
    } catch (e) {
        console.log(e)
    }
})




//Note:
//mandate will be created for an account only once.you cannot create mandate for an account twice , will through an error
//you cannot take payments with same payment string twice will through an error. same goes for subscription


module.exports = router